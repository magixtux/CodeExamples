//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemUser", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class SystemUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyClient.ServiceReference1.Adventure[] AdventuresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashedPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGameMasterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyClient.ServiceReference1.Adventure[] Adventures {
            get {
                return this.AdventuresField;
            }
            set {
                if ((object.ReferenceEquals(this.AdventuresField, value) != true)) {
                    this.AdventuresField = value;
                    this.RaisePropertyChanged("Adventures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashedPassword {
            get {
                return this.HashedPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.HashedPasswordField, value) != true)) {
                    this.HashedPasswordField = value;
                    this.RaisePropertyChanged("HashedPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGameMaster {
            get {
                return this.IsGameMasterField;
            }
            set {
                if ((this.IsGameMasterField.Equals(value) != true)) {
                    this.IsGameMasterField = value;
                    this.RaisePropertyChanged("IsGameMaster");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adventure", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class Adventure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogbookField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyClient.ServiceReference1.SystemUser[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyClient.ServiceReference1.Rumor RumorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logbook {
            get {
                return this.LogbookField;
            }
            set {
                if ((object.ReferenceEquals(this.LogbookField, value) != true)) {
                    this.LogbookField = value;
                    this.RaisePropertyChanged("Logbook");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyClient.ServiceReference1.SystemUser[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyClient.ServiceReference1.Rumor Rumor {
            get {
                return this.RumorField;
            }
            set {
                if ((object.ReferenceEquals(this.RumorField, value) != true)) {
                    this.RumorField = value;
                    this.RaisePropertyChanged("Rumor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rumor", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class Rumor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISystemUser")]
    public interface ISystemUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Create", ReplyAction="http://tempuri.org/ISystemUser/CreateResponse")]
        void Create(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Create", ReplyAction="http://tempuri.org/ISystemUser/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/GetAll", ReplyAction="http://tempuri.org/ISystemUser/GetAllResponse")]
        MyClient.ServiceReference1.SystemUser[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/GetAll", ReplyAction="http://tempuri.org/ISystemUser/GetAllResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Find", ReplyAction="http://tempuri.org/ISystemUser/FindResponse")]
        MyClient.ServiceReference1.SystemUser Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Find", ReplyAction="http://tempuri.org/ISystemUser/FindResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Update", ReplyAction="http://tempuri.org/ISystemUser/UpdateResponse")]
        int Update(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Update", ReplyAction="http://tempuri.org/ISystemUser/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Delete", ReplyAction="http://tempuri.org/ISystemUser/DeleteResponse")]
        bool Delete(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemUser/Delete", ReplyAction="http://tempuri.org/ISystemUser/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISystemUserChannel : MyClient.ServiceReference1.ISystemUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SystemUserClient : System.ServiceModel.ClientBase<MyClient.ServiceReference1.ISystemUser>, MyClient.ServiceReference1.ISystemUser {
        
        public SystemUserClient() {
        }
        
        public SystemUserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SystemUserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SystemUserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SystemUserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(MyClient.ServiceReference1.SystemUser entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public MyClient.ServiceReference1.SystemUser[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public MyClient.ServiceReference1.SystemUser Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public int Update(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public bool Delete(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAdventure")]
    public interface IAdventure {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Create", ReplyAction="http://tempuri.org/IAdventure/CreateResponse")]
        void Create(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Create", ReplyAction="http://tempuri.org/IAdventure/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Delete", ReplyAction="http://tempuri.org/IAdventure/DeleteResponse")]
        bool Delete(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Delete", ReplyAction="http://tempuri.org/IAdventure/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Find", ReplyAction="http://tempuri.org/IAdventure/FindResponse")]
        MyClient.ServiceReference1.SystemUser Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Find", ReplyAction="http://tempuri.org/IAdventure/FindResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/GetAll", ReplyAction="http://tempuri.org/IAdventure/GetAllResponse")]
        MyClient.ServiceReference1.SystemUser[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/GetAll", ReplyAction="http://tempuri.org/IAdventure/GetAllResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Update", ReplyAction="http://tempuri.org/IAdventure/UpdateResponse")]
        int Update(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Update", ReplyAction="http://tempuri.org/IAdventure/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdventureChannel : MyClient.ServiceReference1.IAdventure, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdventureClient : System.ServiceModel.ClientBase<MyClient.ServiceReference1.IAdventure>, MyClient.ServiceReference1.IAdventure {
        
        public AdventureClient() {
        }
        
        public AdventureClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdventureClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdventureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdventureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(MyClient.ServiceReference1.SystemUser entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public bool Delete(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public MyClient.ServiceReference1.SystemUser Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public MyClient.ServiceReference1.SystemUser[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.UpdateAsync(entity);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICharacter")]
    public interface ICharacter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Create", ReplyAction="http://tempuri.org/ICharacter/CreateResponse")]
        void Create(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Create", ReplyAction="http://tempuri.org/ICharacter/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetAll", ReplyAction="http://tempuri.org/ICharacter/GetAllResponse")]
        MyClient.ServiceReference1.SystemUser[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetAll", ReplyAction="http://tempuri.org/ICharacter/GetAllResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Find", ReplyAction="http://tempuri.org/ICharacter/FindResponse")]
        MyClient.ServiceReference1.SystemUser Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Find", ReplyAction="http://tempuri.org/ICharacter/FindResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Update", ReplyAction="http://tempuri.org/ICharacter/UpdateResponse")]
        int Update(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Update", ReplyAction="http://tempuri.org/ICharacter/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Delete", ReplyAction="http://tempuri.org/ICharacter/DeleteResponse")]
        bool Delete(MyClient.ServiceReference1.SystemUser entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Delete", ReplyAction="http://tempuri.org/ICharacter/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICharacterChannel : MyClient.ServiceReference1.ICharacter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CharacterClient : System.ServiceModel.ClientBase<MyClient.ServiceReference1.ICharacter>, MyClient.ServiceReference1.ICharacter {
        
        public CharacterClient() {
        }
        
        public CharacterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CharacterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(MyClient.ServiceReference1.SystemUser entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public MyClient.ServiceReference1.SystemUser[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public MyClient.ServiceReference1.SystemUser Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.SystemUser> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public int Update(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public bool Delete(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(MyClient.ServiceReference1.SystemUser entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
}
